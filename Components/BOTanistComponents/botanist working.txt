import React, { useState } from 'react';
import { Button, View, StyleSheet, Linking, Text } from 'react-native';
import { ListItem } from 'react-native-elements';
import { usePlantsStore } from '../../App';
import GardenArea from '../GardenComponents/GardenArea';
import Json from './BOTanistMessages.json'
import { RadioButton } from 'react-native-paper';
import { observer } from 'mobx-react';
import * as WebBrowser from 'expo-web-browser';


// const plants  = controller.getPlantById(1)

const BOTanistChat = observer(({ navigation }) => {

    // export default function BOTanistChat({navigation}) {
    const [currentChat, setCurrentChat] = useState([])
    const [value, setValue] = React.useState('0');

    const Plantstore = usePlantsStore()
    const areas = Plantstore.gardenAreas.Areas
    const allPlants = Object.values(Plantstore.PlantsStore.plantsArr)
    const user = Plantstore.user
    const userName = user.firstName
    // console.log(user)
    // console.log(user.id)
    // console.log(plantObj)
    const getPlantById = Plantstore.BotanistStore.getPlantObj
    // const allDiseases = Plantstore.Diseases.dummy_diseases // ***change to diseases***
    // console.log(allDiseases)
    // console.log(areas)
    var gardensNames = areas.map(area => {
        return area.name
    })

    const Welcome = () => {
        const message = Json.welcome.replace("user_name", userName)
        setCurrentChat(
            ...currentChat,
            [
                <Text>{message}</Text>,
                <Button
                    disabled
                    title="Help me pick a new plant to adopt!"
                    onPress={() => suggestions()} />,
                <Button
                    title="One of my plants is sick..."
                    onPress={() => diseases()} />
            ])
    }


    // const suggestions = () => {
    //     const gardenMessage = Json.suggestions.garden
    //     setCurrentChat(
    //         ...currentChat,
    //         [
    //             <>
    //                 <Text>{gardenMessage}</Text>
    //                 {gardensNames.map((gardenName, i) => {
    //                     return <Button
    //                         key={i}
    //                         title={gardenName}
    //                         onPress={() => suggestionsResultsFunction(gardenName)} />
    //                 })}
    //                 <Button key={34567898765}
    //                     title="None of the above"
    //                     onPress={() => noGarden()}
    //                 />
    //             </>
    //         ])
    // }



    // const noGarden = () => {
    //     const noGarednaMessage = Json.suggestions.none
    //     setCurrentChat([
    //         ...currentChat,
    //         [
    //             <Text key={34875}>{noGarednaMessage}</Text>
    //         ]
    //     ])
    // }


    // const suggestionsResultsFunction = async (gardenName) => {
    //     console.log(garden)
    //     const garden = areas.find(area=>area.name===gardenName)
    //     const resultsMessage = Json.suggestions.results.replace("garden_name", gardenName)
    //     const noMatches = Json.suggestions.no_matches
    //     const gardenConditions = garden.conditions
    //     await console.log("looking for results from the DB")
    //     const results = ["cacti", "herbs"]

    //     setCurrentChat(
    //         ...currentChat,
    //         [
    //             results
    //                 ? <>
    //                     <Text>{resultsMessage}</Text>
    //                     {results.map((result, i) => {
    //                         return (
    //                             <ListItem key={i} >
    //                                 <Text >{result}</Text>
    //                             </ListItem>
    //                         )
    //                     }
    //                     )}
    //                 </>
    //                 : <Text>{noMatches}</Text>
    //         ])
    // }






    const diseases = () => {
        const gardenMessage = Json.diseases.garden
        setCurrentChat(
            ...currentChat,
            [
                <>
                    <Text>{gardenMessage}</Text>
                    {gardensNames.map((gardenName, i) => {
                        return <Button
                            key={i}
                            title={gardenName}
                            // onPress={() => plantFunction(gardenName)} />
                            onPress={() => getGardenPlants(gardenName)} />
                    })}
                    <Button key={34567898765}
                        title="None of the above"
                        onPress={() => noGarden()}
                    />
                </>
            ])
    }



    const getGardenPlants = async (gardenName) => {
        const garden = areas.find(area => area.name === gardenName)
        try {
            const result = await Plantstore.gardenAreas.getGardensPlants(garden.id)
            plantFunction(garden)
            // console.log(result)
            // console.log(Plantstore.gardenAreas.currentGardenPlants);
        }
        catch (err) {
            throw err;
            console.log(err);
        }
    }


    const plantFunction = (garden) => {
        const gardenPlants = Plantstore.gardenAreas.currentGardenPlants
        const plantMessage = Json.diseases.plant
        // console.log("message",plantMessage)
        console.log("hi")
        const plantsIDs = garden.plants
        // plantsIDs.map(plantId => {
        //     gardenPlants.push(allPlants.find(p => p.id === plantId))
        // })
        console.log(gardenPlants)
        setCurrentChat(
            ...currentChat,
            [
                <>
                    <Text>{plantMessage}</Text>
                    {gardenPlants.map((plant, i) => {
                        return (
                            <Button
                                key={i}
                                title={plant.nickname ? plant.nickname : plant.name}
                                onPress={() => diseasesFunctions(plant)} />
                        )
                    })}
                </>
            ]
        )

    }

    const counter = () => {
        let num = -1
        return ++num
    }
    const diseasesFunctions = async (plant) => {
        // const plantObj = controller.getPlantById(plant.id)
        await getPlantById(plant.id)
        const plantObj = Plantstore.BotanistStore.plantObj
        console.log(plantObj);
        console.log(plantObj[0].diseases);
        const plantName = plant.nickname ? plant.nickname : plant.name
        const diseases = plantObj[0].diseases
        const symptomsMessage = Json.diseases.symptoms.replace("plant_name", plantName)
        console.log(diseases)
        // let counter = 0
        setCurrentChat(
            ...currentChat,
            [
                <>
                    <Text>{symptomsMessage}</Text>
                    <View>


                        {diseases.map((disease, i) => {
                            return (
                                <View key={i}>
                                    <Button
                                        title={disease.main_symptoms}
                                        onPress={() => diseasesResultFunction(disease.id, diseases, plantName)}
                                    />


                                </View>
                            )
                        })
                        }
                    </View>
                </>
            ]
        )
    }

    const diseasesResultFunction = (diseaseId, diseases, plantName) => {
        const chosenDisease = diseases.find(d => d.id === diseaseId)
        const diseaseName = chosenDisease.name ? chosenDisease.name : chosenDisease.scientific_name
        const resultsMessage = Json.diseases.results.replace("disease_name", diseaseName).replace("plant_name", plantName)

        setCurrentChat(
            ...currentChat,
            [
                <>
                    <Text>{resultsMessage}</Text>
                    {/* <Image
                        style={styles.smallLogo}
                        source={chosenDisease.img_link}
                    /> */}
                    <Text>this is how you can treat {chosenDisease.name} ({chosenDisease.scientific_name}): {"\n"}
                        {chosenDisease.treatment}
                    </Text>
                    <Button
                        title={"Read more about" + ' ' + diseaseName}
                        onPress={() => WebBrowser.openBrowserAsync(chosenDisease.external_link)}
                        style={{ color: 'blue' }}
                    />
                    {/* <Text 
                        onPress={() => Linking.openURL(chosenDisease.external_link)}>
                        Read more about {diseaseName}
                    </Text> */}
                </>
            ]
        )
    }




    // *radio button
    // diseases=[
    //     id ,
    //     name,  
    //     scientific_name ,
    //     time_of_year ,
    //     treatment ,
    //     main_symptoms  ,
    //     img_link  ,
    //     external_link 
    // ]

    console.log("chat history", currentChat)
    return (
        <View
            style={{
                flex: 1,
                justifyContent: "center",
                alignItems: "center"
            }}>

            <Button title="Menu" onPress={() => navigation.toggleDrawer()} />

            <Text>BOTanist Chat</Text>


            {currentChat.length > 0
                ? currentChat.map((element, i) => <View key={i}>{element}</View>)
                : <Button
                    onPress={Welcome}
                    title="Hi BOTanist! :)"
                />
            }

        </View>
    )
}
)

const styles = StyleSheet.create({
    smallLogo: {
        width: 70,
        height: 70,
    },
});

export default BOTanistChat